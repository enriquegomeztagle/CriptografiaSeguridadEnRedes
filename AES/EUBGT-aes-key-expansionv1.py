NR = 10  # Number of rounds (AES-128)
NB = 4  # Number of columns (32-bit words) comprising the State
NK = 4  # Number of 32-bit words in the key (AES-128)

# AES S-box used for substitution in key expansion
S_BOX = [
    [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5,
     0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76],
    [0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0,
     0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0],
    [0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc,
     0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15],
    [0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a,
     0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75],
    [0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0,
     0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84],
    [0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b,
     0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf],
    [0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85,
     0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8],
    [0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5,
     0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2],
    [0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17,
     0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73],
    [0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88,
     0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb],
    [0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c,
     0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79],
    [0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9,
     0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08],
    [0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6,
     0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a],
    [0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e,
     0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e],
    [0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94,
     0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf],
    [0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68,
     0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16]
]

# RCon values used in key expansion
R_CON = [
    [0x00, 0x00, 0x00, 0x00],
    [0x01, 0x00, 0x00, 0x00],
    [0x02, 0x00, 0x00, 0x00],
    [0x04, 0x00, 0x00, 0x00],
    [0x08, 0x00, 0x00, 0x00],
    [0x10, 0x00, 0x00, 0x00],
    [0x20, 0x00, 0x00, 0x00],
    [0x40, 0x00, 0x00, 0x00],
    [0x80, 0x00, 0x00, 0x00],
    [0x1b, 0x00, 0x00, 0x00],
    [0x36, 0x00, 0x00, 0x00],
]

def sub_byte(byte):
    """
    Substitute a single byte using the AES S-box.

    Args:
        byte (int): A byte (integer from 0 to 255).

    Returns:
        int: The substituted byte.
    """
    row = (byte >> 4) & 0x0F  # Get the upper 4 bits
    col = byte & 0x0F         # Get the lower 4 bits
    return S_BOX[row][col]

def sub_word(word):
    """
    Substitute each byte in the word using the AES S-box.

    Args:
        word (list of int): A list of four bytes (integers from 0 to 255).

    Returns:
        list of int: The substituted word.
    """
    return [sub_byte(b) for b in word]

def rot_word(word):
    """
    Rotate a word (list of four bytes) one byte to the left.

    Args:
        word (list of int): A list of four bytes.

    Returns:
        list of int: The rotated word.
    """
    return word[1:] + word[:1]

def key_expansion(key):
    """
    Perform key expansion to generate the key schedule for AES-128.

    Args:
        key (list of int): The cipher key as a list of 16 bytes.

    Returns:
        list of list of int: The key schedule as a list of 44 words (each word is 4 bytes).
    """

    key_schedule = []

    # Copy the cipher key into the first NK words of the key schedule
    for i in range(NK):
        word = key[4*i:4*(i+1)]
        key_schedule.append(word)

    # Generate the rest of the key schedule
    for i in range(NK, NB*(NR+1)):
        temp = key_schedule[i - 1].copy()
        if i % NK == 0:
            temp = rot_word(temp)
            temp = sub_word(temp)
            temp = [t ^ r for t, r in zip(temp, R_CON[i // NK])]
        word = [k ^ t for k, t in zip(key_schedule[i - NK], temp)]
        key_schedule.append(word)

    return key_schedule

# Cipher key from FIPS-197 example
key = [
    0x2b, 0x7e, 0x15, 0x16,
    0x28, 0xae, 0xd2, 0xa6,
    0xab, 0xf7, 0x15, 0x88,
    0x09, 0xcf, 0x4f, 0x3c
]

# Generate the expanded keys
expanded_keys = key_expansion(key)

# Expected key schedule from FIPS-197 (Appendix A.1)
expected_keys = [
    [0x2b, 0x7e, 0x15, 0x16],  # w0
    [0x28, 0xae, 0xd2, 0xa6],  # w1
    [0xab, 0xf7, 0x15, 0x88],  # w2
    [0x09, 0xcf, 0x4f, 0x3c],  # w3
    [0xa0, 0xfa, 0xfe, 0x17],  # w4
    [0x88, 0x54, 0x2c, 0xb1],  # w5
    [0x23, 0xa3, 0x39, 0x39],  # w6
    [0x2a, 0x6c, 0x76, 0x05],  # w7
    [0xf2, 0xc2, 0x95, 0xf2],  # w8
    [0x7a, 0x96, 0xb9, 0x43],  # w9
    [0x59, 0x35, 0x80, 0x7a],  # w10
    [0x73, 0x59, 0xf6, 0x7f],  # w11
    [0x3d, 0x80, 0x47, 0x7d],  # w12
    [0x47, 0x16, 0xfe, 0x3e],  # w13
    [0x1e, 0x23, 0x7e, 0x44],  # w14
    [0x6d, 0x7a, 0x88, 0x3b],  # w15
    [0xef, 0x44, 0xa5, 0x41],  # w16
    [0xa8, 0x52, 0x5b, 0x7f],  # w17
    [0xb6, 0x71, 0x25, 0x3b],  # w18
    [0xdb, 0x0b, 0xad, 0x00],  # w19
    [0xd4, 0xd1, 0xc6, 0xf8],  # w20
    [0x7c, 0x83, 0x9d, 0x87],  # w21
    [0xca, 0xf2, 0xb8, 0xbc],  # w22
    [0x11, 0xf9, 0x15, 0xbc],  # w23
    [0x6d, 0x88, 0xa3, 0x7a],  # w24
    [0x11, 0x0b, 0x3e, 0xfd],  # w25
    [0xdb, 0xf9, 0x86, 0x41],  # w26
    [0xca, 0x00, 0x93, 0xfd],  # w27
    [0x4e, 0x54, 0xf7, 0x0e],  # w28
    [0x5f, 0x5f, 0xc9, 0xf3],  # w29
    [0x84, 0xa6, 0x4f, 0xb2],  # w30
    [0x4e, 0xa6, 0xdc, 0x4f],  # w31
    [0xea, 0xd2, 0x73, 0x21],  # w32
    [0xb5, 0x8d, 0xba, 0xd2],  # w33
    [0x31, 0x2b, 0xf5, 0x60],  # w34
    [0x7f, 0x8d, 0x29, 0x2f],  # w35
    [0xac, 0x77, 0x66, 0xf3],  # w36
    [0x19, 0xfa, 0xdc, 0x21],  # w37
    [0x28, 0xd1, 0x29, 0x41],  # w38
    [0x57, 0x5c, 0x00, 0x6e],  # w39
    [0xd0, 0x14, 0xf9, 0xa8],  # w40
    [0xc9, 0xee, 0x25, 0x89],  # w41
    [0xe1, 0x3f, 0x0c, 0xc8],  # w42
    [0xb6, 0x63, 0x0c, 0xa6],  # w43
]

# Print generated keys
print("Expanded keys generated by my implementation:")
for i, word in enumerate(expanded_keys):
    print(f"w{i:02d}: {''.join(f'{b:02x}' for b in word)}")

# Compare generated keys with expected keys
correct_keys = 0
total_keys = len(expected_keys)

print("\nComparison of the keys:")
for i, (my_key, expected_key) in enumerate(zip(expanded_keys, expected_keys)):
    if my_key == expected_key:
        print(f"w{i:02d}: Correct")
        correct_keys += 1
    else:
        print(f"w{i:02d}: Incorrect")
        my_hex = ''.join(f'{b:02x}' for b in my_key)
        expected_hex = ''.join(f'{b:02x}' for b in expected_key)
        print(f"  Your key:      {my_hex}")
        print(f"  Expected key:  {expected_hex}")

# Calculate accuracy
accuracy = (correct_keys / total_keys) * 100
print(f"\nAccuracy: {accuracy:.2f}%")
print(f"Error rate: {100 - accuracy:.2f}%")
